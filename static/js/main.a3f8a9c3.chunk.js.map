{"version":3,"sources":["Card.js","Deck.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","image","useState","angle","Math","random","xPos","yPos","transform","className","alt","src","style","API_BASE_URL","Deck","deck","setDeck","drawn","setDrawn","autoDraw","setAutoDraw","timerRef","useRef","useEffect","a","axios","get","d","data","getData","getCard","deck_id","drawRes","remaining","Error","card","cards","id","code","suit","value","alert","current","setInterval","clearInterval","map","c","fontSize","onClick","auto","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAqBeA,MAhBf,YAA8B,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,MAAQ,EAEGC,mBAAS,CACrCC,MAAuB,GAAhBC,KAAKC,SAAgB,GAC5BC,KAAsB,GAAhBF,KAAKC,SAAgB,GAC3BE,KAAsB,GAAhBH,KAAKC,SAAgB,KALF,sBAEnBF,EAFmB,EAEnBA,MAAOG,EAFY,EAEZA,KAAMC,EAFM,EAENA,KAMfC,EAAS,oBAAgBF,EAAhB,eAA2BC,EAA3B,sBAA6CJ,EAA7C,QAEf,OAAO,qBAAKM,UAAU,OACZC,IAAKV,EACLW,IAAKV,EACLW,MAAO,CAACJ,gB,gBCbdK,G,MAAe,uCAmFNC,MA/Ef,WAAiB,IAAD,EACUZ,mBAAS,MADnB,mBACPa,EADO,KACDC,EADC,OAEYd,mBAAS,IAFrB,mBAEPe,EAFO,KAEAC,EAFA,OAGkBhB,oBAAS,GAH3B,mBAGPiB,EAHO,KAGGC,EAHH,KAIRC,EAAWC,iBAAO,MAGxBC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACgBC,IAAMC,IAAN,UAAab,EAAb,kBADhB,OACMc,EADN,OAEEX,EAAQW,EAAEC,MAFZ,4CADc,uBAAC,WAAD,wBAKdC,KACC,CAACb,IAGJO,qBAAU,WAAM,SAECO,IAFD,2EAEd,gCAAAN,EAAA,6DACQO,EAAYhB,EAAZgB,QADR,kBAIwBN,IAAMC,IAAN,UAAab,EAAb,YAA6BkB,EAA7B,WAJxB,UAMmC,KAF3BC,EAJR,QAMgBJ,KAAKK,UANrB,sBAOMb,GAAY,GACN,IAAIc,MAAM,uBARtB,OAWUC,EAAOH,EAAQJ,KAAKQ,MAAM,GAEhClB,GAAS,SAAAS,GAAC,4BACLA,GADK,CAER,CACEU,GAAIF,EAAKG,KACTtC,KAAMmC,EAAKI,KAAO,IAAMJ,EAAKK,MAC7BvC,MAAOkC,EAAKlC,YAlBpB,kDAsBIwC,MAAM,EAAD,IAtBT,2DAFc,sBAkCd,OANItB,IAAaE,EAASqB,UACxBrB,EAASqB,QAAUC,YAAW,sBAAC,sBAAAnB,EAAA,sEACvBM,IADuB,2CAE5B,MAGE,WACLc,cAAcvB,EAASqB,SACvBrB,EAASqB,QAAU,QAEpB,CAACvB,EAAUC,EAAaL,IAE3B,IAIMqB,EAAQnB,EAAM4B,KAAI,SAAAC,GAAC,OACvB,cAAC,EAAD,CAAiB9C,KAAM8C,EAAE9C,KAAMC,MAAO6C,EAAE7C,OAA7B6C,EAAET,OAGf,OACE,sBAAK5B,UAAU,OAAf,UACE,qBAAIA,UAAU,aAAd,UAA2B,sBAAMG,MAAO,CAAEmC,SAAU,QAAzB,oBAA3B,kBAA4F,sBAAMnC,MAAO,CAAEmC,SAAU,QAAzB,uBAE1FhC,EACE,yBAAQN,UAAU,aAAauC,QAbhB,WACrB5B,GAAY,SAAA6B,GAAI,OAAKA,MAYf,UACG9B,EAAW,OAAS,OADvB,sBAGE,KAEN,qBAAKV,UAAU,gBAAf,SAAgC2B,QCxEvBc,MARf,WACE,OACI,8BACE,cAAC,EAAD,OCMOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a3f8a9c3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport './Card.css';\n\n/** Single card: just renders the card as received from deck. */\n\nfunction Card({name, image}) {\n\n  const [{angle, xPos, yPos}] = useState({\n    angle: Math.random() * 90 - 45,\n    xPos: Math.random() * 40 - 20,\n    yPos: Math.random() * 40 - 20\n  });\n\n  const transform = `translate(${xPos}px, ${yPos}px) rotate(${angle}deg)`;\n\n  return <img className=\"Card\"\n            alt={name}\n            src={image}\n            style={{transform}} />;\n}\n\nexport default Card\n","import React, { useEffect, useState, useRef } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport \"./Deck.css\";\n\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck\";\n\n/* Deck: uses deck API, allows drawing card at a time. */\n\nfunction Deck() {\n  const [deck, setDeck] = useState(null);\n  const [drawn, setDrawn] = useState([]);\n  const [autoDraw, setAutoDraw] = useState(false);\n  const timerRef = useRef(null);\n\n  /* At mount: load deck from API into state. */\n  useEffect(() => {\n    async function getData() {\n      let d = await axios.get(`${API_BASE_URL}/new/shuffle/`);\n      setDeck(d.data);\n    }\n    getData();\n  }, [setDeck]);\n\n  /* Draw one card every second if autoDraw is true */\n  useEffect(() => {\n    /* Draw a card via API, add card to state \"drawn\" list */\n    async function getCard() {\n      let { deck_id } = deck;\n\n      try {\n        let drawRes = await axios.get(`${API_BASE_URL}/${deck_id}/draw/`);\n\n        if (drawRes.data.remaining === 0) {\n          setAutoDraw(false);\n          throw new Error(\"no cards remaining!\");\n        }\n\n        const card = drawRes.data.cards[0];\n\n        setDrawn(d => [\n          ...d,\n          {\n            id: card.code,\n            name: card.suit + \" \" + card.value,\n            image: card.image\n          }\n        ]);\n      } catch (err) {\n        alert(err);\n      }\n    }\n\n    if (autoDraw && !timerRef.current) {\n      timerRef.current = setInterval(async () => {\n        await getCard();\n      }, 1000);\n    }\n\n    return () => {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    };\n  }, [autoDraw, setAutoDraw, deck]);\n\n  const toggleAutoDraw = () => {\n    setAutoDraw(auto => !auto);\n  };\n\n  const cards = drawn.map(c => (\n    <Card key={c.id} name={c.name} image={c.image} />\n  ));\n\n  return (\n    <div className=\"Deck\">\n      <h1 className=\"Deck-title\"><span style={{ fontSize: '50px' }}>&#10084;</span> Deck of Cards <span style={{ fontSize: '50px' }}>&#10084;</span></h1>\n      {\n        deck ? (\n          <button className=\"Deck-gimme\" onClick={toggleAutoDraw}>\n            {autoDraw ? \"STOP\" : \"KEEP\"} DRAWING FOR ME!\n          </button>\n        ) : null\n      }\n      <div className=\"Deck-cardarea\">{cards}</div>\n    </div >\n  );\n}\n\nexport default Deck;\n","import React from 'react';\nimport Deck from \"./Deck\"\n\nfunction App() {\n  return (\n      <div>\n        <Deck />\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}